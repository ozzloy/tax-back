#+title: tax api documentation

* general format of all successful responses

#+begin_src json
  {
    "slice, aka table": {
      "record id": {
        "id": "record id",
        "column name": "column value",
        "another column name": "another column value"
      }
    }
  }
#+end_src

* "king" == "user"

"user" is a reserved word in psql, which needs to be quoted. since
this project is generating sql with libraries, it uses "king" to avoid
having to generate sql with quotes in it.

* king authentication/authorization

** all endpoints without valid CSRF token


#+begin_src verb
  http/1.1 400 bad request
  content-type: application/json

  {
    "message": "missing or invalid CSRF token"
  }
#+end_src

** all endpoints that require authorization

all endpoints that require authentication and the current king does
not have the correct role(s) or permission(s).

#+begin_src verb
  http/1.1 403 forbidden
  content-type: application/json

  {
    "message": "forbidden"
  }
#+end_src

* session

** session.login

*** session.login.request

#+begin_src verb
  post /api/session/
  content-type: application/json

  {
    "email": "bob@example.com",
    "password": "secret password"
  }
#+end_src

*** session.login.response

**** session.login.response.success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "king": {
          "1": {
              "id": 1,
              "email": "john.smith@example.com",
              "nick": "johnsmith",
              "theme_id": 1
          }
      }
  }
#+end_src

**** session.login.response.failure

***** session.login.response.failure.field missing

#+begin_src verb
  http/1.1 400 bad request
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "email": "email is required",
          "password": "password is required"
      }
  }
#+end_src

***** session.login.response.failure.validation

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "credential": "credential field must be at least 1 character",
          "password": "must be at least 1 character"
      }
  }
#+end_src

***** session.login.response.failure.invalid credentials

#+begin_src verb
  http/1.1 401 unauthorized
  content-type: application/json

  {
    "message": "invalid credentials"
  }
#+end_src

** session.logout

*** session.logout.request

#+begin_src verb
  delete /api/session/
#+end_src

*** session.logout.response

**** session.logout.response.success

#+begin_src verb
  http/1.1 204 No Content
  Set-Cookie: session=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; Secure; SameSite=Strict
#+end_src

**** session.logout.response.failure

unclear how this could fail in such a way that the server could send a
response indicating that it failed.

* king

** king.create, aka create an account

*** king.create.request

  + require authentication: true
  + require authorization: false

#+begin_src verb
  post /api/king
  content-type: application/json

  {
      "email": "bob@example.com",
      "nick": "bob",
      "password": "secret password",
  }
#+end_src

*** king.create.response

**** king.create.response.success

default theme is assigned on account creation

#+begin_src verb
  http/1.1 201 created
  content-type: application/json

  {
      "king": {
          "1": {
              "id": 1,
              "email": "bob@example.com",
              "nick": "bob",
              "theme_id": 1
          }
      }
  }
#+end_src

**** king.create.response.failure

***** king.create.response.failure.field missing

#+begin_src verb
  http/1.1 400 bad request
  content-type: application/json

  {
      "message": "field missing",
      "errors": {
          "email": "email is required",
          "nick": "nick is required",
          "password": "password is required"
      }
  }
#+end_src

***** king.create.response.failure.validation

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "email": "invalid email",
          "nick": "nick must have at least 1 character",
          "password": "password must have at least 1 character",
      }
  }
#+end_src

***** king.create.response.failure.conflict

#+begin_src verb
  http/1.1 409 conflict
  content-type: application/json

  {
      "message": "account conflict",
      "errors": {
          "email": "email is taken",
          "nick": "nick is taken"
      }
  }
#+end_src

** king.read

  + require authentication: false
  + require authorization: false

*** king.read.request

  + session identifies king

#+begin_src verb
  get /api/king
#+end_src

*** king.read.response

**** king.read.response.logged in

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "king": {
          "1": {
              "id": 1,
              "email": "john.smith@example.com",
              "nick": "johnsmith",
              "theme_id": 1
          }
      }
  }
#+end_src

**** king.read.response.anonymous

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "king": null
  }
#+end_src

** king.update, change account details

  + require authentication: true
  + require authorization: true

*** king.update.request

  + all fields are optional
  + session identifies king

#+begin_src verb
  put /api/king
  content-type: application/json

  {
      "email": "bob2@example.com",
      "nick": "bob2",
      "password": "secret password2",
      "theme_id": 2
  }
#+end_src

*** king.update.response

**** king.update.response.success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "king": {
          "1": {
              "id": 1
              "email": "bob2@example.com",
              "nick": "bob2",
              "password": "secret password2",
              "theme_id": 1
          }
      }
  }
#+end_src

**** king.update.response.failure

***** king.update.response.failure.validation

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "email": "invalid email",
          "nick": "nick must have at least 1 character",
          "email": "email must have at least 1 character",
          "theme_id": "theme_id must be an existing theme's id"
      }
  }
#+end_src

***** king.update.response.failure.conflict

#+begin_src verb
  http/1.1 409 conflict
  content-type: application/json

  {
      "message": "account conflict",
      "errors": {
          "email": "email is taken",
          "nick": "nick is taken"
      }
  }
#+end_src

** king.delete, aka remove an account

  + require authentication: true
  + require authorization: true

*** king.delete.request

#+begin_src verb
  delete /api/king/
#+end_src

*** king.delete.response

**** king.delete.response.success

#+begin_src verb
  http/1.1 200 ok

  {
      "king": {
          "1": null
      }
  }
#+end_src

**** king.delte.response.failure

this request can't fail, other than the already covered unauthorized
and unauthenticated failures described above.

* human

** human.create

*** human.create.request

  + authentication required
  + authorization required
  + king identified by session, do not put king_id in request's body

#+begin_src verb
  post /api/human/
  content-type: application/json

  {
      "first_name": "bob",
      "middle_initial": "b",
      "last_name": "bobert"
  }
#+end_src

*** human.create.response

**** human.create.response.success

#+begin_src verb
  http/1.1 201 created
  content-type: application/json

  {
      "human": {
          "1": {
              "id": 1,
              "first_name": "bob",
              "middle_initial": "b",
              "last_name": "bobert"
          }
      }
  }
#+end_src

**** human.create.response.failure

***** human.create.response.failure.validation

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "first_name": "first_name must have at least 1 character",
          "middle_initial": "middle_initial must have at least 1 character",
          "last_name": "last_name must have at least 1 character"
      }
  }
#+end_src

***** human.create.response.failure.conflict

currently have no way of uniquely identifying each person. this would
be SSN, but i'm not going to ask people for their SSN's on this
project. two different people could have the exact same first, middle
and last name.

** human.read

  + require authentication: true
  + require authorization: true

*** human.read.request

#+begin_src verb
  get /api/human/:human_id
#+end_src

*** human.read.respone

**** human.read.response.success

king id is omitted because it will be the same as the current king

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
    "human": {
        "1": {
            "id": 1,
            "first_name": "bob",
            "middle_initial": "b",
            "last_name": "bobert",
        }
    }
  }
#+end_src

**** human.read.response.failure

***** human.read.response.failure.not found

return this response when there is no human with the specified id, and
when there is a human with that id, but it does not belong to the king.

#+begin_src verb
  http/1.1 404

  {
    "message": "human 1 not found"
  }
#+end_src

** human.read_all

  + require authentication: true
  + require authorization: true

*** human.read_all.request

#+begin_src verb
  get /api/human/
#+end_src

*** human.read_all.respone

**** human.read_all.response.success

king id is omitted because it will be the same as the current king

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
    "human": {
        "1": {
            "id": 1,
            "first_name": "bob",
            "middle_initial": "b",
            "last_name": "bobert",
        },
        "2": {
            "id": 2,
            "first_name": "laura",
            "middle_initial": "b",
            "last_name": "bobert",
        }
    }
  }
#+end_src

**** human.read_all.response.failure

no way to fail, except for authentication and authorization failures
described at the top for all routes.

** human.update

*** human.update.request

  + authentication required
  + authorization required
  + "king_id" taken from session, do not put it in request's body

#+begin_src verb
  post /api/human/
  content-type: application/json

  {
      "first_name": "bob",
      "middle_initial": "b",
      "last_name": "bobert"
  }
#+end_src

*** human.update.response

**** human.update.response.success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "human": {
          "1": {
              "id": 1,
              "first_name": "bob",
              "middle_initial": "b",
              "last_name": "bobert"
          }
      }
  }
#+end_src

**** human.update.response.failure

***** human.update.response.failure.validation errors

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "first_name": "first_name must have at least 1 character",
          "middle_initial": "middle_initial must have at least 1 character",
          "last_name": "last_name must have at least 1 character",
      }
  }
#+end_src

** human.delete

*** human.delete.request

#+begin_src verb
  delete /api/human/:human_id
#+end_src

*** human.delete.response

**** human.delete.response.success

#+begin_src verb
  http/1.1 200 ok

  {
      "human": {
          "1": null
      }
  }
#+end_src

**** human.delete.response.failure

***** human.delete.response.failure.not found

when human with specified id does not belong to current king, either
because it does not exist, or because it exists, but current king does
not own it

#+begin_src verb
  http/1.1 404 not found
  content-type: application/json

  {
      "message": "human not found",
      "errors": {
          "human": "human not found"
      }
  }
#+end_src

* theme

** theme.create

  + require authentication: true
  + require authorization: false

*** theme.create.request

#+begin_src verb
  post /api/theme
  content-type: application/json

  {
      "name": "blue steele",
      "text_color": "blue",
      "background_color": "steele"
  }
#+end_src

*** theme.create.response

**** theme.create.response.success

#+begin_src verb
  http/1.1 201 created
  content-type: application/json

  {
      "theme": {
          "1": {
              "id": 1,
              "name": "blue steele",
              "text_color": "blue",
              "background_color": "steele"
          }
      }
  }
#+end_src

**** theme.create.response.failure

***** theme.create.response.failure.field missing

#+begin_src verb
  http/1.1 400 bad request
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "name": "theme name required",
          "text_color": "text color is required",
          "background_color": "background color is required"
      }
  }
#+end_src

***** theme.create.response.failure.validation

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "name": "theme name must have at least 1 character",
          "text_color": "text color must have at least 1 character",
          "background_color": "background color must have at least 1 character"
      }
  }
#+end_src

** theme.read

*** theme.read.request

#+begin_src verb
  get /api/theme/:theme_id
#+end_src

*** theme.read.response

**** theme.read.response.success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "theme": {
          "1": {
              "id": 1,
              "name": "blue steele",
              "text_color": "blue",
              "background_color": "steele"
          }
      }
  }
#+end_src

**** theme.read.response.failure

***** theme.read.response.failure.not found

#+begin_src verb
  http/1.1 404

  {
      "message": "theme not found",
      "errors": {
          "theme": "theme not found"
      }
  }
#+end_src

** theme.read_all

*** theme.read_all.request

#+begin_src verb
  get /api/theme/
#+end_src

*** theme.read_all.response

**** theme.read_all.response.success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "theme": {
          "1": {
              "id": 1,
              "name": "blue steele",
              "text_color": "blue",
              "background_color": "steele"
          },
          "2": {
              "id": 1,
              "name": "tropic thunder",
              "text_color": "darkslateblue",
              "background_color": "darkslategray"
          }
      }
  }
#+end_src

**** theme.read_all.response.failure

see authentication and authorization failures described above.

** theme.update

*** theme.update.request

#+begin_src verb
  put /api/theme/:theme_id
  content-type: application/json

  {
      "name": "blue steele",
      "text_color": "blue",
      "background_color": "steele"
  }
#+end_src

*** theme.update.response

**** theme.update.response.success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "theme": {
          "1": {
              "id": 1,
              "name": "blue steele",
              "text_color": "blue",
              "background_color": "steele"
          }
      }
  }
#+end_src

**** theme.update.response.failure

***** theme.update.response.failure.field missing

#+begin_src verb
  http/1.1 400 bad request
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "name": "theme name required",
          "text_color": "text color is required",
          "background_color": "background color is required"
      }
  }
#+end_src

***** theme.update.response.failure.validation

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "name": "theme name must have at least 1 character",
          "text_color": "text color must have at least 1 character",
          "background_color": "background color must have at least 1 character"
      }
  }
#+end_src


***** theme.update.response.failure.not found

#+begin_src verb
  http/1.1 404

  {
    "message": "theme 1 not found"
  }
#+end_src

** theme.delete

*** theme.delete.request

#+begin_src verb
  delete /api/theme/:theme_id
#+end_src

*** theme.delete.response

**** theme.delete.response.success

#+begin_src verb
  http/1.1 200 ok

  {
      "theme": {
          "1": null
      }
  }
#+end_src

**** theme.delete.response.failure

***** theme.delete.response.failure.not found

#+begin_src verb
  http/1.1 404

  {
    "message": "theme 1 not found"
  }
#+end_src

* form_1040

** form_1040.create

  + require authentication: true
  + require authorization: false

*** form_1040.create.request

filer id is the session's current king's id

#+begin_src verb
  post /api/form_1040
  content-type: application/json

  {
      "tax_year": 2024,
      "spouse_id": 2,
      "address_id": 1,
      "wages": 1,
      "withholdings": 1
  }
#+end_src

*** form_1040.create.response

**** form_1040.create.response.success

every field is optional, this allows partial complete saves

#+begin_src verb
  http/1.1 201 created
  content-type: application/json

  {
      "form_1040": {
          "1": {
              "id": 1,
              "tax_year": 2024,
              "spouse_id": 2,
              "address_id": 1,
              "wages": 1,
              "withholdings": 1
          }
      }
  }
#+end_src

**** form_1040.create.response.failure

***** form_1040.create.response.failure.validation

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "tax_year": "must be a postive integer",
          "spouse_id": "spouse_id must be id of a human",
          "address_id": "address_id must be the id of an address",
          "wages": "wages must be a number",
          "withholdings": "withholdings must be a number"
      }
  }
#+end_src

** form_1040.read

*** form_1040.read.request

#+begin_src verb
  get /api/form_1040/:form_1040_id
#+end_src

*** form_1040.read.response

**** form_1040.read.response.success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "form_1040": {
          "1": {
              "id": 1,
              "tax_year": 2024,
              "spouse_id": 2,
              "address_id": 1,
              "wages": 1,
              "withholdings": 1
          }
      }
  }
#+end_src

**** form_1040.read.response.failure

***** form_1040.read.response.failure.not found

form does not exist, or is not filed by current king

#+begin_src verb
  http/1.1 404

  {
      "message": "form_1040 not found",
      "errors": {
          "form_1040": "form_1040 not found"
      }
  }
#+end_src

** form_1040.read_all

*** form_1040.read_all.request

#+begin_src verb
  get /api/form_1040/
#+end_src

*** form_1040.read_all.response

**** form_1040.read_all.response.success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "form_1040": {
          "1": {
              "id": 1,
              "tax_year": 2024,
              "spouse_id": 2,
              "address_id": 1,
              "wages": 1,
              "withholdings": 1
          },
          "2": {
              "id": 1,
              "tax_year": 2023,
              "spouse_id": 3,
              "address_id": 1,
              "wages": 1,
              "withholdings": 1
          }
      }
  }
#+end_src

**** form_1040.read_all.response.failure

see authentication and authorization failures for all routes described
near top

** form_1040.update

*** form_1040.update.request

filer id comes is current session's king id

#+begin_src verb
  put /api/form_1040/:form_1040_id
  content-type: application/json

  {
      "tax_year": 2024,
      "spouse_id": 2,
      "address_id": 1,
      "wages": 1,
      "withholdings": 1
  }
#+end_src

*** form_1040.update.response

**** form_1040.update.response.success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "form_1040": {
          "1": {
              "id": 1,
              "tax_year": 2024,
              "spouse_id": 2,
              "address_id": 1,
              "wages": 1,
              "withholdings": 1
          }
      }
  }
#+end_src

**** form_1040.update.response.failure

***** form_1040.update.response.failure.validation

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "tax_year": "must be a postive integer",
          "spouse_id": "spouse_id must be id of a human",
          "address_id": "address_id must be the id of an address",
          "wages": "wages must be a number",
          "withholdings": "withholdings must be a number"
      }
  }
#+end_src


#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "name": "form_1040 name must have at least 1 character",
          "text_color": "text color must have at least 1 character",
          "background_color": "background color must have at least 1 character"
      }
  }
#+end_src

** form_1040.delete

*** form_1040.delete.request

#+begin_src verb
  delete /api/form_1040/:form_1040_id
#+end_src

*** form_1040.delete.response

**** form_1040.delete.response.success

#+begin_src verb
  http/1.1 200 ok

  {
      "form_1040": {
          "1": null
      }
  }
#+end_src

**** form_1040.delete.response.failure

***** form_1040.delete.response.failure.not found

form does not exist or is not filed by current king

#+begin_src verb
  http/1.1 404

  {
    "message": "form_1040 1 not found"
  }
#+end_src

* address

** address.create

  + require authentication: true
  + require authorization: false

*** address.create.request

#+begin_src verb
  post /api/address
  content-type: application/json

  {
      "street": "1600 pennsylvania avenue",
      "city": "beverly hills",
      "state": "california",
      "zip": "90210"
  }
#+end_src

*** address.create.response

**** address.create.response.success

every field is optional, this allows partial complete saves

#+begin_src verb
  http/1.1 201 created
  content-type: application/json

  {
      "address": {
          "1": {
              "id": 1,
              "street": "1600 pennsylvania avenue",
              "city": "beverly hills",
              "state": "california",
              "zip": "90210"
          }
      }
  }
#+end_src

**** address.create.response.failure

***** address.create.response.failure.validation

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "street": "street must have at least 1 character",
          "city": "city must have at least 1 character",
          "state": "state must have at least 1 character",
          "zip": "zip must have at least 1 character"
      }
  }
#+end_src

** address.read

*** address.read.request

#+begin_src verb
  get /api/address/:address_id
#+end_src

*** address.read.response

**** address.read.response.success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "address": {
          "1": {
              "id": 1,
              "street": "1600 pennsylvania avenue",
              "city": "beverly hills",
              "state": "california",
              "zip": "90210"
          }
      }
  }
#+end_src

**** address.read.response.failure

***** address.read.response.failure.not found

#+begin_src verb
  http/1.1 404

  {
      "message": "address not found",
      "errors": {
          "address": "address not found"
      }
  }
#+end_src

** address.read_all

*** address.read_all.request

#+begin_src verb
  get /api/address/
#+end_src

*** address.read_all.response

**** address.read_all.response.success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "address": {
          "1": {
              "id": 1,
              "street": "1600 pennsylvania avenue",
              "city": "beverly hills",
              "state": "california",
              "zip": "90210"
          },
          "2": {
              "id": 1,
              "street": "10 downing street",
              "city": "britain",
              "state": "ok",
              "zip": "90210-1776"
          }
      }
  }
#+end_src

**** address.read_all.response.failure

see authentication and authorization failures for all routes described
near top

** address.update

*** address.update.request

#+begin_src verb
  put /api/address/:address_id
  content-type: application/json

  {
      "street": "1600 pennsylvania avenue",
      "city": "beverly hills",
      "state": "california",
      "zip": "90210"
  }
#+end_src

*** address.update.response

**** address.update.response.success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "address": {
          "1": {
              "id": 1,
              "street": "1600 pennsylvania avenue",
              "city": "beverly hills",
              "state": "california",
              "zip": "90210"
          }
      }
  }
#+end_src

**** address.update.response.failure

***** address.update.response.failure.validation

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "street": "street must have at least 1 character",
          "city": "city must have at least 1 character",
          "state": "state must have at least 1 character",
          "zip": "zip must have at least 1 character"
      }
  }
#+end_src

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "name": "address name must have at least 1 character",
          "text_color": "text color must have at least 1 character",
          "background_color": "background color must have at least 1 character"
      }
  }
#+end_src

** address.delete

*** address.delete.request

#+begin_src verb
  delete /api/address/:address_id
#+end_src

*** address.delete.response

**** address.delete.response.success

#+begin_src verb
  http/1.1 200 ok

  {
      "address": {
          "1": null
      }
  }
#+end_src

**** address.delete.response.failure

***** address.delete.response.failure.not found

#+begin_src verb
  http/1.1 404

  {
    "message": "address 1 not found"
  }
#+end_src

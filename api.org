#+title: tax api documentation

all tables will also have "created" and "updated" fields not shown
here

[[./schema.png]]

* general format of all successful responses

#+begin_src json
  {
    "slice, aka table": {
      "record id": {
        "id": "record id",
        "column name": "column value",
        "another column name": "another column value"
      }
    }
  }
#+end_src

* "king" == "user"

"user" is a reserved word in psql, which needs to be quoted. since
this project is generating sql with libraries, it uses "king" to avoid
having to generate sql with quotes in it.

* king authentication/authorization

** all endpoints that require authentication

all endpoints that require a king to be logged in

#+begin_src verb
  http/1.1 401 unauthorized
  content-type: application/json

  {
    "message": "authentication required"
  }
#+end_src

** all endpoints that require authorization

all endpoints that require authentication and the current king does
not have the correct role(s) or permission(s).

#+begin_src verb
  http/1.1 403 forbidden
  content-type: application/json

  {
    "message": "forbidden"
  }
#+end_src

* session

** generate a csrf token

  + require authentication: false

*** csrf request

#+begin_src verb
  get /api/csrf
#+end_src

*** csrf response

#+begin_src verb
  http/1.1 200 ok
  set-cookie: csrf_token=csrf_token;
#+end_src

** session > login

*** session > login > request

#+begin_src verb
  post /api/login
  content-type: application/json

  {
    "credential": "email or nick",
    "password": "secret password"
  }
#+end_src

*** session > login > response

**** login success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "king": {
          "1": {
              "id": 1,
              "email": "john.smith@example.com",
              "nick": "johnsmith",
              "theme_id": 1
          }
      }
  }
#+end_src

**** login failures

***** login invalid credentials

#+begin_src verb
  http/1.1 401 unauthorized
  content-type: application/json

  {
    "message": "invalid credentials"
  }
#+end_src

***** login missing required fields

#+begin_src verb
  http/1.1 400 bad request
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "credential": "credential with nick or email value required",
          "password": "password is required"
      }
  }
#+end_src

***** login validation errors

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "credential": "credential field must be at least 1 character",
          "password": "must be at least 1 character"
      }
  }
#+end_src

* king

** create king, sign up an account

*** create king request

  + require authentication: true
  + require authorization: false

#+begin_src verb
  post /api/king
  content-type: application/json

  {
      "email": "john.smith@example.com",
      "nick": "johnsmith",
      "password": "secret password",
  }
#+end_src

*** king create response

**** success for king create

#+begin_src verb
  http/1.1 201 created
  content-type: application/json

  {
      "king": {
          "1": {
              "id": 1,
              "email": "john.smith@example.com",
              "nick": "johnsmith",
              "theme_id": 1
          }
      }
  }
#+end_src

**** failures for king create

***** king create missing required fields

#+begin_src verb
  http/1.1 400 bad request
  content-type: application/json

  {
      "message": "missing required fields",
      "errors": {
          "email": "email is required",
          "nick": "nick is required"
      }
  }
#+end_src

***** king create validation errors

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "email": "invalid email",
          "nick": "nick must have at least 1 character",
          "name": "name must have at least 1 character"
      }
  }
#+end_src

***** king create conflict

#+begin_src verb
  http/1.1 409 conflict
  content-type: application/json

  {
      "message": "account conflict",
      "errors": {
          "email": "email is taken",
          "nick": "nick is taken"
      }
  }
#+end_src

** read current session's king

  + require authentication: false
  + require authorization: false

*** request current king

#+begin_src verb
  get /api/king
#+end_src

*** response to current king read

**** when logged in

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "king": {
          "1": {
              "id": 1,
              "email": "john.smith@example.com",
              "nick": "johnsmith",
              "theme_id": 1
          }
      }
  }
#+end_src

**** when anonymous

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "king": null
  }
#+end_src

** update king

  + require authentication: true
  + require authorization: true

*** request king update

  + all fields are optional

#+begin_src verb
  put /api/king
  content-type: application/json

  {
      "email": "john.smith@example.com",
      "nick": "johnsmith",
      "password": "secret password",
      "theme_id": 2
  }
#+end_src

*** response to king update request

**** king update success response

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "king": {
          "1": {
              "id": 1
              "email": "john.smith2@example.com",
              "nick": "johnsmith2",
              "password": "secret password2",
              "theme_id": 1
          }
      }
  }
#+end_src

**** failures for king update

***** validation errors for king update

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "email": "invalid email",
          "nick": "nick must have at least 1 character",
          "email": "email must have at least 1 character",
          "theme_id": "theme_id must be an existing theme's id"
      }
  }
#+end_src

***** account conflict for king update

#+begin_src verb
  http/1.1 409 conflict
  content-type: application/json

  {
      "message": "account conflict",
      "errors": {
          "email": "email is taken",
          "nick": "nick is taken"
      }
  }
#+end_src

** delete a king

  + require authentication: true
  + require authorization: true

*** request

#+begin_src verb
  delete /api/king/
#+end_src

*** response to king delete request

**** success response to king delete request

#+begin_src verb
  http/1.1 200 ok

  {
      "king": {
          "1": null
      }
  }
#+end_src

**** failures for king delete

this request can't fail, other than the already covered unauthorized
and unauthenticated failures described above.

* human

** create human

*** request create human

  + authentication required
  + authorization required
  + "king_id" taken from session, do not put it in request's body

#+begin_src verb
  post /api/human/
  content-type: application/json

  {
      "first_name": "bob",
      "middle_initial": "b",
      "last_name": "bobert"
  }
#+end_src

*** response to create human request

**** success response to create human request

#+begin_src verb
  http/1.1 201 created
  content-type: application/json

  {
      "id": 1,
      "first_name": "bob",
      "middle_initial": "b",
      "last_name": "bobert",
  }
#+end_src

**** failures for create human request

***** create human missing required fields

#+begin_src verb
  http/1.1 400 bad request
  content-type: application/json

  {
      "message": "missing required fields",
      "errors": {
          "first_name": "first name is required",
          "middle_initial": "middle inital is required",
          "last_name": "last name is required"
      }
  }
#+end_src

***** create human validation errors

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "first_name": "first_name must have at least 1 character",
          "middle_initial": "middle_initial must have at least 1 character",
          "last_name": "last_name must have at least 1 character",
      }
  }
#+end_src

***** create human conflict

currently have no way of uniquely identifying each person. this would
be SSN, but i'm not going to ask people for their SSN's on this
project. two different people could have the exact same first, middle
and last name.

** read a human

  + require authentication: true
  + require authorization: true

*** request human

#+begin_src verb
  get /api/human/:human_id
#+end_src

*** respones to human read request

**** success response to human read request

king id is omitted because it will be the same as the current king

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
    "human": {
        "1": {
            "id": 1,
            "first_name": "bob",
            "middle_initial": "b",
            "last_name": "bobert",
        }
    }
  }
#+end_src

**** failures for human read requests

***** human does not exist failure for human read request

return this response when there is no human with the specified id, and
when there is a human with that id, but it does not belong to the king.

#+begin_src verb
  http/1.1 404

  {
    "message": "human 1 not found"
  }
#+end_src

** human>update

*** human>update>request

  + authentication required
  + authorization required
  + "king_id" taken from session, do not put it in request's body

#+begin_src verb
  post /api/human/
  content-type: application/json

  {
      "first_name": "bob",
      "middle_initial": "b",
      "last_name": "bobert"
  }
#+end_src

*** human>update>response

**** human>update>response>success

#+begin_src verb
  http/1.1 200 ok
  content-type: application/json

  {
      "id": 1,
      "first_name": "bob",
      "middle_initial": "b",
      "last_name": "bobert",
  }
#+end_src

**** human>update>response>failures

***** human>update>response>failure>missing fields

#+begin_src verb
  http/1.1 400 bad request
  content-type: application/json

  {
      "message": "missing required fields",
      "errors": {
          "first_name": "first name is required",
          "middle_initial": "middle inital is required",
          "last_name": "last name is required"
      }
  }
#+end_src

***** human>update>response>failure>validation errors

#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "first_name": "first_name must have at least 1 character",
          "middle_initial": "middle_initial must have at least 1 character",
          "last_name": "last_name must have at least 1 character",
      }
  }
#+end_src

** human>delete

*** human>delete>request

#+begin_src verb
  delete /api/human/:human_id
#+end_src

*** human>delete>response

**** human>delete>response>success

#+begin_src verb
  http/1.1 200 ok

  {
      "human": {
          "1": null
      }
  }
#+end_src

**** human>delete>response>failures

**** human>delete>response>failures>not-found

when human with specified id does not belong to current king, either
because it does not exist, or because it exists, but current king does
not own it

#+begin_src verb
  http/1.1 404 not found
  content-type: application/json

  {
      "message": "human not found",
      "errors": {
          "human": "human not found"
      }
  }
#+end_src

* theme
** theme>create
  + require authentication: true
  + require authorization: false
*** theme>create>request
#+begin_src verb
  post /api/theme
  content-type: application/json

  {
      "name": "blue steele",
      "text_color": "blue",
      "background_color": "steele"
  }
#+end_src
*** theme>create>response
**** theme>create>response>success
#+begin_src verb
  http/1.1 201 created
  content-type: application/json

  {
      "theme": {
          "1": {
              "id": 1,
              "name": "blue steele",
              "text_color": "blue",
              "background_color": "steele"
          }
      }
  }
#+end_src
**** theme>create>response>failures
***** theme>create>response>failures>missing fields
#+begin_src verb
  http/1.1 400 bad request
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "name": "theme name required",
          "text_color": "text color is required",
          "background_color": "background color is required"
      }
  }
#+end_src
***** theme>create>response>failures>validation errors
#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "name": "theme name must have at least 1 character",
          "text_color": "text color must have at least 1 character",
          "background_color": "background color must have at least 1 character"
      }
  }
#+end_src
** theme>read
*** theme>read>request
*** theme>read>response
**** theme>read>response>success
**** theme>read>response>failures
***** theme>read>response>failures>not found
** theme>update
*** theme>update>request
*** theme>update>response
**** theme>update>response>success
**** theme>update>response>failures
***** theme>create>response>failures>missing fields
#+begin_src verb
  http/1.1 400 bad request
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "name": "theme name required",
          "text_color": "text color is required",
          "background_color": "background color is required"
      }
  }
#+end_src
***** theme>create>response>failures>validation errors
#+begin_src verb
  http/1.1 422 unprocessable entity
  content-type: application/json

  {
      "message": "bad request",
      "errors": {
          "name": "theme name must have at least 1 character",
          "text_color": "text color must have at least 1 character",
          "background_color": "background color must have at least 1 character"
      }
  }
#+end_src
** theme>delete
*** theme>delete>request
*** theme>delete>response
**** theme>delete>response>success
**** theme>delete>response>failures
***** theme>delete>response>not found

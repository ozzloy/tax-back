#+title: tax

* fill out federal 1040 easily

* developer setup

** install pipenv and get the dev packages

this is on a debian derived system, like ubuntu, or debian

#+begin_src bash
  sudo apt install -y pipenv
  # if you need pyenv,
  # wget -O - https://pyenv.run | bash
  sudo apt-get install libpq-dev python3-dev
  git clone <repo-url>
  cd tax
  pipenv install --dev
  pipenv run pre-commit install
#+end_src

** config files
*** ~pyrightconfig.json~
set up ~pyrightconfig.json~ by first creating the file using the
template

#+begin_src bash
  cd tax
  cp example.pyrightconfig.json pyrightconfig.json
#+end_src

then fill in the path parts of the file using the values from these
two commands

#+begin_src bash
  cd tax
  pipenv --venv | xargs dirname
  pipenv --venv | xargs basename
#+end_src

*** ~.env~
make ~.env~ from ~example.env~

#+begin_src bash
  cp example.env .env
#+end_src

and modify it with appropriate values. in particular, uncomment
~SECRET_KEY~ and set its value to the output of ~openssl rand -base64
10~ (or some other random value)

example output:

#+begin_quote
EUwJH5UzMj0W6Q==
#+end_quote

don't use that value though, it's the one i'm using and i'd hate for
there to be a collision.

** configure postgres

*** create a user, db, schema, grant permissions

in terminal,
#+begin_src bash
  sudo -u postgres psql
  # drop into psql shell
#+end_src

that will drop you into psql

#+begin_src sql
  CREATE USER tax_user WITH PASSWORD 'tax user password';
  -- CREATE ROLE

  CREATE DATABASE tax_db OWNER tax_user;
  -- CREATE DATABASE

  \c tax_db
  -- You are now connected to database "tax_db" as user "postgres".

  CREATE SCHEMA tax_schema AUTHORIZATION tax_user;
  -- CREATE SCHEMA

  GRANT ALL ON SCHEMA tax_schema TO tax_user;
  -- GRANT

  \q
  -- back to bash
#+end_src

below are useful psql commands,

#+begin_src sql
  -- connect to psql,
  --   for example:
  --     sudo -u postgres psql
  --   or
  --     psql "postgresql://user:pw@host:5432/tax_db?search_path=tax_schema

  -- list all dbs
  \l

  -- connect to db
  \c tax_db

  -- list all schemas in current db
  \dn

  -- set the schema
  SET search_path TO tax_schema;
  -- SET

  -- list all tables in current db under current schema
  \dt

  -- see schema of a table
  \d king
#+end_src

** run the tests

#+begin_src bash
  pipenv run pytest
#+end_src

yay!

* run
#+begin_src bash
  pipenv run flask run
#+end_src

will give output like this

#+begin_src text
 * Serving Flask app 'app'
 * Debug mode: on
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081
Press CTRL+C to quit
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 111-099-696
#+end_src

* deploy

if cloning from github,

on the server, first configure the environment, as per the
instructions above
#+begin_src bash
  git clone https://gitea.com/ozzloy/tax.git
  cd tax
  pipenv run flask run
#+end_src

* schema

  all tables will have fields: id, created, updated

  [[./schema.svg]]

  to modify, edit "schema.puml" and run

  #+begin_src bash
    plantuml -tsvg schema.puml
  #+end_src

  see also: [[file:api.org][api docs]]

* wireframe

signup, sign in, list forms, delete account
  [[./wireframe-0.jpg]]

fill form, theme management
  [[./wireframe-1.jpg]]

* api
  see [[file:api.org][api docs]]
* tech stack
** backend
*** flask
*** sqlalchemy
*** pydantic
*** pytest
*** factory boy
** frontend
*** react
*** redux
